# Run the `kubectl top pods` command to get the CPU usage for each pod in the cluster
$pod_cpu_usage = kubectl top pods --all-namespaces --containers | ConvertFrom-Csv | Select-Object -Property namespace, name, cpu

# Group the pod CPU usage by deployment and sum the CPU usage for each deployment
$deployment_cpu_usage = $pod_cpu_usage | ForEach-Object { "$($_.namespace)/$($_.name)".Split('-')[0] } | Group-Object | Select-Object -Property Name, @{ Name='Cpu'; Expression={ ($_.Group.cpu | Measure-Object -Sum).Sum } }

# Sort the deployments by CPU usage and get the top 5
$sorted_deployments = $deployment_cpu_usage | Sort-Object -Property Cpu -Descending | Select-Object -First 5

# Print the list of top 5 deployments by CPU usage
foreach ($deployment in $sorted_deployments) {
    $deployment_name = $deployment.Name
    $cpu_usage = $deployment.Cpu
    Write-Host "$deployment_name: $cpu_usage"
}


az redis show --name <redis-name> --resource-group <resource-group-name> --ids $(az redis show --name <redis-name> --resource-group <resource-group-name> --query id --output tsv)/diagnostics \
--query 'cacheMemoryUsage,cacheCPUUtilization,activeClientConnections'

-----

from azure.monitor.query import MetricsQueryClient
from azure.identity import DefaultAzureCredential

# Replace with your Azure subscription ID and Azure Cache for Redis resource ID
subscription_id = 'your-subscription-id'
resource_id = '/subscriptions/{subscription_id}/resourceGroups/{resource_group}/providers/Microsoft.Cache/Redis/{cache_name}'

# Create an instance of the MetricsQueryClient class
credential = DefaultAzureCredential()
metrics_client = MetricsQueryClient(credential)


----------

import subprocess
import re

# Define the command to retrieve the CPU usage of all pods in all namespaces
cmd = ["kubectl", "top", "pod", "--all-namespaces"]

# Run the command and capture the output
output = subprocess.check_output(cmd).decode()

# Parse the output and group the CPU usage by app
cpu_usage_by_app = {}
lines = output.strip().split('\n')
for line in lines[1:]:
    cols = re.split('\s+', line.strip())
    app = cols[1].split('-')[0] # Extract the app name from the pod name
    cpu_usage = cols[2]
    if app not in cpu_usage_by_app:
        cpu_usage_by_app[app] = 0
    cpu_usage_by_app[app] += int(cpu_usage)

# Print the total CPU usage for each app
for app, cpu_usage in cpu_usage_by_app.items():
    print(f"{app}: {cpu_usage}m")


# Define the metrics to retrieve
metrics = [
    'Server CPU',
    'Memory Usage',
    'Connected Clients'
]

# Define the time range for the metrics query (last 5 minutes in this example)
from_date = datetime.datetime.now() - datetime.timedelta(minutes=5)
to_date = datetime.datetime.now()

# Execute the metrics query and retrieve the results
result = metrics_client.query(resource_id, metrics, from_date, to_date, timespan=None, granularity='PT1M')

# Process the metrics data
for metric in result.metrics:
    print('Metric:', metric.name.localized_value)
    for time_series in metric.timeseries:
        print('Time Series:')
        for data_point in time_series.data:
            print('Timestamp:', data_point.time_stamp)
            print('Value:', data_point.average)

--------------------------------
---------------

# Get the database ID for your Azure Cosmos DB account
database_id=$(az cosmosdb show --name <cosmosdb-account-name> --resource-group <resource-group> --query "id")

# Get the list of collections in your Azure Cosmos DB account
collections=$(az cosmosdb collection list --account-name <cosmosdb-account-name> --db-name <database-name> --query "[].id" -o tsv)

# Loop through each collection and get its RU consumption metrics
for collection in $collections
do
    # Get the collection ID for the current collection
    collection_id=$(az cosmosdb collection show --collection-name $collection --db-name <database-name> --account-name <cosmosdb-account-name> --query "resource.id")

    # Get the RU consumption metrics for the current collection
    az monitor metrics list --resource $database_id/collections/$collection_id --metric "Total Request Units Consumed" --interval PT1H --start-time $(date +%Y-%m-%dT%H:%MZ -d '-1 hour') --end-time $(date +%Y-%m-%dT%H:%MZ) --aggregation Average --query "{Collection: dimensions[0].value, 'RU Consumption': average}" -o table
done


--------------
from kubernetes import client, config

# Load the Kubernetes configuration
config.load_kube_config()

# Create the Kubernetes API clients
v1 = client.CoreV1Api()
metrics_api = client.MetricsV1beta1Api()
apps_api = client.AppsV1Api()

# Set the deployment name and namespace
deploy_name = "<your-deployment-name>"
namespace = "<your-namespace>"

# Get the deployment object
deploy = apps_api.read_namespaced_deployment(deploy_name, namespace=namespace)

# Get the labels for the deployment
labels = deploy.spec.selector.match_labels

# Get the pods for the deployment
pods = v1.list_namespaced_pod(namespace=namespace, label_selector=','.join([f"{k}={v}" for k, v in labels.items()]))

# Get the CPU and memory usage metrics for each pod
for pod in pods.items:
    pod_name = pod.metadata.name
    pod_metrics = metrics_api.list_namespaced_pod_metrics(namespace=namespace, label_selector=','.join([f"{k}={v}" for k, v in labels.items()]), field_selector=f"metadata.name={pod_name}")

    # Print the CPU and memory usage metrics for the pod
    print(f"Metrics for pod {pod_name}:")
    for container in pod_metrics.items[0].containers:
        print(f" - Container {container.name}: CPU usage {container.usage['cpu']}, memory usage {container.usage['memory']}")


---------------


import subprocess
import re

# Define the command to retrieve the CPU usage of all pods in all namespaces
cmd = ["kubectl", "top", "pod", "--all-namespaces"]

# Run the command and capture the output
output = subprocess.check_output(cmd).decode()

# Parse the output and group the CPU usage by app
cpu_usage_by_app = {}
lines = output.strip().split('\n')
for line in lines[1:]:
    cols = re.split('\s+', line.strip())
    app = cols[1].split('-')[0] # Extract the app name from the pod name
    cpu_usage = cols[2]
    if app not in cpu_usage_by_app:
        cpu_usage_by_app[app] = 0
    cpu_usage_by_app[app] += int(cpu_usage)

# Print the total CPU usage for each app
for app, cpu_usage in cpu_usage_by_app.items():
    print(f"{app}: {cpu_usage}m")
    


kubectl get pods -o 'custom-columns=NAME:.metadata.name,CPU:.spec.containers[*].usage.cpu,MEMORY:.spec.containers[*].usage.memory,ANNOTATIONS:.metadata.annotations' | kubectl top pods

---------------------

import pandas as pd

# Create a data frame
df = pd.DataFrame({
    'Class Name': ['AB-CD-1-1', 'AB-CD-1-2', 'AB-CD-1-3', 'EF-GH-1-1', 'EF-GH-1-2', 'EF-GH-1-3'],
    'Number of Students': [20, 30, 40, 50, 60, 70]
})

# Extract the class name without the last two substrings
df['Number of Students'] = df['Number of Students'].str.rstrip('s').astype(int)
df['Class'] = df['Class Name'].str.split('-', n=2).str[:2].str.join('-')

df['Class'] = df['Class Name'].apply(lambda x: '-'.join(x.split('-')[:-2]))


# Group the data by the class name and sum the number of students
df_sum = df.groupby('Class')['Number of Students'].sum()

# Print the resulting data frame
print(df_sum)

df_sum.to_csv('output.txt', header=True, index=True, sep='\t')


